<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add a beer" xml:space="preserve">
    <value>Add a beer</value>
  </data>
  <data name="Admin" xml:space="preserve">
    <value>Admin</value>
  </data>
  <data name="Admin panel" xml:space="preserve">
    <value>Admin panel</value>
  </data>
  <data name="Alcohol by volume" xml:space="preserve">
    <value>Alcohol by volume</value>
  </data>
  <data name="Alcohol volume:" xml:space="preserve">
    <value>Alcohol volume:</value>
  </data>
  <data name="All beers" xml:space="preserve">
    <value>All beers</value>
  </data>
  <data name="Are you over 18?" xml:space="preserve">
    <value>Are you over 18?</value>
  </data>
  <data name="Are you sure you want to delete this beer?" xml:space="preserve">
    <value>Are you sure you want to delete this beer?</value>
  </data>
  <data name="Back to list" xml:space="preserve">
    <value>Back to list</value>
  </data>
  <data name="Beer Name" xml:space="preserve">
    <value>Beer Name</value>
  </data>
  <data name="Beer Search" xml:space="preserve">
    <value>Beer Search</value>
  </data>
  <data name="Beero" xml:space="preserve">
    <value>Beer-o-pedia</value>
  </data>
  <data name="Brewery" xml:space="preserve">
    <value>Brewery</value>
  </data>
  <data name="Brewery name" xml:space="preserve">
    <value>Brewery name</value>
  </data>
  <data name="Brewery:" xml:space="preserve">
    <value>Brewery: </value>
  </data>
  <data name="Change password" xml:space="preserve">
    <value>Change password</value>
  </data>
  <data name="Click here to Logout" xml:space="preserve">
    <value>Click here to Logout</value>
  </data>
  <data name="Confirm email" xml:space="preserve">
    <value>Confirm email</value>
  </data>
  <data name="Confirm new password" xml:space="preserve">
    <value>Confirm new password</value>
  </data>
  <data name="Confirm Password" xml:space="preserve">
    <value>Confirm Password</value>
  </data>
  <data name="Confirm your account" xml:space="preserve">
    <value>Confirm your account</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="Create a beer" xml:space="preserve">
    <value>Dodaj piwo</value>
  </data>
  <data name="Current password" xml:space="preserve">
    <value>Current password</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Delete account" xml:space="preserve">
    <value>Delete account</value>
  </data>
  <data name="Delete Beer" xml:space="preserve">
    <value>Delete Beer</value>
  </data>
  <data name="Delete confirmation" xml:space="preserve">
    <value>Delete confirmation</value>
  </data>
  <data name="Delete your account" xml:space="preserve">
    <value>Delete your account</value>
  </data>
  <data name="Deleting this data will permanently remove your account, and this cannot be recovered." xml:space="preserve">
    <value>Deleting this data will permanently remove your account, and this cannot be recovered.</value>
  </data>
  <data name="Details" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="dupa" xml:space="preserve">
    <value>ass</value>
  </data>
  <data name="E-mail confirmed" xml:space="preserve">
    <value>E-mail confirmed</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="Edit Beer" xml:space="preserve">
    <value>Edit Beer</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="Fav" xml:space="preserve">
    <value>❤ Fav it!</value>
  </data>
  <data name="Favorites" xml:space="preserve">
    <value>❤Favorites</value>
  </data>
  <data name="Flavors" xml:space="preserve">
    <value>Flavors</value>
  </data>
  <data name="Flavors:" xml:space="preserve">
    <value>Flavors:</value>
  </data>
  <data name="Forgot password confirmation" xml:space="preserve">
    <value>Forgot password confirmation</value>
  </data>
  <data name="Forgot your password?" xml:space="preserve">
    <value>Forgot your password?</value>
  </data>
  <data name="Image" xml:space="preserve">
    <value>Image</value>
  </data>
  <data name="Image URL" xml:space="preserve">
    <value>Image URL</value>
  </data>
  <data name="Languages" xml:space="preserve">
    <value>Languages</value>
  </data>
  <data name="Leaving this empty will set the score to 0.Max value is 10." xml:space="preserve">
    <value>Leaving this empty will set the score to 0.Max value is 10.</value>
  </data>
  <data name="Leaving this empty will set the value to 0. Max value is 95." xml:space="preserve">
    <value>Leaving this empty will set the value to 0. Max value is 95.</value>
  </data>
  <data name="Log in" xml:space="preserve">
    <value>Log in</value>
  </data>
  <data name="Login" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="Logout" xml:space="preserve">
    <value>Logout</value>
  </data>
  <data name="Manage Email" xml:space="preserve">
    <value>Manage Email</value>
  </data>
  <data name="Manage your account" xml:space="preserve">
    <value>Manage your account</value>
  </data>
  <data name="Maximum alcohol %" xml:space="preserve">
    <value>Maximum alcohol %</value>
  </data>
  <data name="Maximum alcohol by volume" xml:space="preserve">
    <value>Maximum alcohol by volume</value>
  </data>
  <data name="Minimum alcohol %" xml:space="preserve">
    <value>Minimum alcohol %</value>
  </data>
  <data name="Minimum alcohol volume" xml:space="preserve">
    <value>Minimum alcohol volume</value>
  </data>
  <data name="New email" xml:space="preserve">
    <value>New email</value>
  </data>
  <data name="New password" xml:space="preserve">
    <value>New password</value>
  </data>
  <data name="NO" xml:space="preserve">
    <value>NO</value>
  </data>
  <data name="No beers in database." xml:space="preserve">
    <value>No beers in database.</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="Phone number" xml:space="preserve">
    <value>Phone number</value>
  </data>
  <data name="Please check your email to confirm your account." xml:space="preserve">
    <value>Please check your email to confirm your account.</value>
  </data>
  <data name="Please check your email to reset your password." xml:space="preserve">
    <value>Please check your email to reset your password.</value>
  </data>
  <data name="Profile" xml:space="preserve">
    <value>Profile</value>
  </data>
  <data name="Provide the URL to the beer's image on the web." xml:space="preserve">
    <value>Provide the URL to the beer's image on the web.</value>
  </data>
  <data name="Register" xml:space="preserve">
    <value>Register</value>
  </data>
  <data name="Register confirmation" xml:space="preserve">
    <value>Register confirmation</value>
  </data>
  <data name="Remember me" xml:space="preserve">
    <value>Remember me</value>
  </data>
  <data name="Resend" xml:space="preserve">
    <value>Resend</value>
  </data>
  <data name="Resend email confirmation" xml:space="preserve">
    <value>Resend email confirmation</value>
  </data>
  <data name="Reset" xml:space="preserve">
    <value>Reset</value>
  </data>
  <data name="Reset Password" xml:space="preserve">
    <value>Reset Password</value>
  </data>
  <data name="Reset password confirmation" xml:space="preserve">
    <value>Reset password confirmation</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Score" xml:space="preserve">
    <value>Score</value>
  </data>
  <data name="Score:" xml:space="preserve">
    <value>Score:</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="Select your favorite flavors" xml:space="preserve">
    <value>Select your favorite flavors</value>
  </data>
  <data name="Separate multiple flavors using any non-letter characters (#%$^!&amp;* etc). But pros simply use commas or spaces." xml:space="preserve">
    <value>Separate multiple flavors using any non-letter characters (#%$^!&amp;* etc). But pros simply use commas or spaces.</value>
  </data>
  <data name="Show beers" xml:space="preserve">
    <value>Show beers</value>
  </data>
  <data name="Style" xml:space="preserve">
    <value>Style</value>
  </data>
  <data name="Style:" xml:space="preserve">
    <value>Style:</value>
  </data>
  <data name="The list is currently empty." xml:space="preserve">
    <value>The list is currently empty.</value>
  </data>
  <data name="The name needs to be 2 - 38 characters long." xml:space="preserve">
    <value>The name needs to be 2 - 38 characters long.</value>
  </data>
  <data name="This app does not currently have a real email sender registered. Normally this would be emailed!" xml:space="preserve">
    <value>This app does not currently have a real email sender registered. Normally this would be emailed!</value>
  </data>
  <data name="Unfav" xml:space="preserve">
    <value>💔 Unfav</value>
  </data>
  <data name="Username" xml:space="preserve">
    <value>Username</value>
  </data>
  <data name="We will capitalise the first letter. Max 40 characters." xml:space="preserve">
    <value>We will capitalise the first letter. Max 40 characters.</value>
  </data>
  <data name="We will capitalise the first letters and remove any non-letter characters, except dash (-)." xml:space="preserve">
    <value>We will capitalise the first letters and remove any non-letter characters, except dash (-).</value>
  </data>
  <data name="Would you like to delete your account?" xml:space="preserve">
    <value>Would you like to delete your account?</value>
  </data>
  <data name="YES" xml:space="preserve">
    <value>YES</value>
  </data>
  <data name="You have successfully logged out of the application." xml:space="preserve">
    <value>You have successfully logged out of the application.</value>
  </data>
  <data name="Your e-mail has been confirmed. Your account is active." xml:space="preserve">
    <value>Your e-mail has been confirmed. Your account is active.</value>
  </data>
  <data name="Your favorite beers" xml:space="preserve">
    <value>Your favorite beers</value>
  </data>
  <data name="Your password has been reset. You can login right now." xml:space="preserve">
    <value>Your password has been reset. You can login right now.</value>
  </data>
  <data name="★ Favorites" xml:space="preserve">
    <value>★ Favorites</value>
  </data>
</root>